// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moisesPompilio/projeto_x/src/adapters/repositorie/UserRepositorie (interfaces: IUserRepositorie)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	domain "github.com/moisesPompilio/projeto_x/src/internal/domain"
	output "github.com/moisesPompilio/projeto_x/src/internal/interfaces/output"
)

// MockIUserRepositorie is a mock of IUserRepositorie interface.
type MockIUserRepositorie struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositorieMockRecorder
}

// MockIUserRepositorieMockRecorder is the mock recorder for MockIUserRepositorie.
type MockIUserRepositorieMockRecorder struct {
	mock *MockIUserRepositorie
}

// NewMockIUserRepositorie creates a new mock instance.
func NewMockIUserRepositorie(ctrl *gomock.Controller) *MockIUserRepositorie {
	mock := &MockIUserRepositorie{ctrl: ctrl}
	mock.recorder = &MockIUserRepositorieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepositorie) EXPECT() *MockIUserRepositorieMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserRepositorie) Create(arg0 context.Context, arg1 domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserRepositorieMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserRepositorie)(nil).Create), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockIUserRepositorie) DeleteByID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockIUserRepositorieMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockIUserRepositorie)(nil).DeleteByID), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockIUserRepositorie) GetByID(arg0 context.Context, arg1 uuid.UUID) (*output.UserOutpDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*output.UserOutpDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIUserRepositorieMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUserRepositorie)(nil).GetByID), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockIUserRepositorie) GetUserByEmail(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIUserRepositorieMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIUserRepositorie)(nil).GetUserByEmail), arg0, arg1)
}
